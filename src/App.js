import React, { useState } from "react";
import axios from "axios";
import './App.css';

function App() {
  const [ingredients, setIngredients] = useState([]);  // Store selected ingredients
  const [ingredientInput, setIngredientInput] = useState("");  // Temporary input value
  const [recipes, setRecipes] = useState([]);  // Store the recipes generated by AI
  const [loading, setLoading] = useState(false);  // To show a loading message
  const [ingredientSuggestions, setIngredientSuggestions] = useState([]);  // Store ingredient suggestions

  // Handle changes in the input field and show suggestions
  const handleInputChange = async (event) => {
    const input = event.target.value;
    setIngredientInput(input);  // Update input

    if (input.length > 1) {
      try {
        const response = await axios.get("https://api.spoonacular.com/food/ingredients/autocomplete", {
          params: {
            query: input,
            number: 5,  // Max number of suggestions
            apiKey: '5b68cb1406094405b7ef067502890e1d',
          },
        });

        setIngredientSuggestions(response.data);  // Set the suggestions
      } catch (error) {
        console.error("Error fetching ingredient suggestions:", error);
      }
    }
  };

  // Select an ingredient from the suggestions
  const handleIngredientSelect = (ingredient) => {
    if (!ingredients.includes(ingredient)) {
      setIngredients([...ingredients, ingredient]);  // Add ingredient to the list
    }
    setIngredientInput("");  // Clear input field
    setIngredientSuggestions([]);  // Clear suggestions
  };

  // Remove an ingredient from the list and refresh recipes
  const handleIngredientRemove = (ingredient) => {
    const updatedIngredients = ingredients.filter((item) => item !== ingredient);  // Remove ingredient from list
    setIngredients(updatedIngredients); 

    // Trigger recipe generation again when ingredients change
    if (updatedIngredients.length > 0) {
      handleSubmit(); // Refresh the recipes
    } else {
      setRecipes([]); // Clear recipes if no ingredients
    }
  };

  // Function to handle form submission and fetch recipes
  const handleSubmit = async () => {
    if (ingredients.length < 3) {
      return; // No need to show error, just return early
    }
    setLoading(true); // Show loading state

    try {
      // Spoonacular API endpoint for searching recipes by ingredients
      const response = await axios.get("https://api.spoonacular.com/recipes/findByIngredients", {
        params: {
          ingredients: ingredients.join(","),
          number: 5, // Number of recipes to fetch
          apiKey: '5b68cb1406094405b7ef067502890e1d', // Replace with your Spoonacular API Key
        },
      });

      if (response.data.length === 0) {
        setRecipes([]); // No recipes found, clear previous ones
      }

      // Now, fetch detailed information for each recipe (including rating)
      const recipeDetailsPromises = response.data.map((recipe) =>
        axios.get(`https://api.spoonacular.com/recipes/${recipe.id}/information`, {
          params: {
            apiKey: '5b68cb1406094405b7ef067502890e1d',
          }
        })
      );

      // Wait for all recipe details to be fetched
      const recipeDetails = await Promise.all(recipeDetailsPromises);

      // Update recipes with their ratings
      const recipesWithRatings = recipeDetails.map((res, idx) => ({
        ...response.data[idx],
        rating: res.data.spoonacularScore,  // Use spoonacularScore as rating
        categories: ["Category 1", "Category 2", "Category 3"],  // Placeholder categories
      }));

      setRecipes(recipesWithRatings); // Store the recipes in the state
    } catch (error) {
      console.error("Error fetching recipes:", error);
      setRecipes([]); // Clear recipes on error
    } finally {
      setLoading(false); // Hide loading state after API call
    }
  };

  // Function to render stars based on rating
  const renderStars = (rating) => {
    const totalStars = 5;
    const filledStars = Math.round(rating / 20);  // Convert score (0-100) to stars (0-5)

    let stars = [];
    for (let i = 0; i < totalStars; i++) {
      stars.push(i < filledStars ? "★" : "☆");
    }

    return (
      <div className="stars">
        {stars.map((star, idx) => (
          <span key={idx} className={star === "★" ? "filled" : "empty"}>
            {star}
          </span>
        ))}
      </div>
    );
  };

  return (
    <div className="App">
      <div className="slogan-container">
        <h5 data-text="Your Personal Chef, Powered by AI">Your Personal Chef, Powered by AI</h5>
      </div>

      <div className="header-container">
        <div className="header-wrap">
        <h1 className="logo">
          SmartBite
        </h1>
        <p className="subtitle">
          Find all recipes in one place by searching for ingredients, and view the results to discover recipe options from our curated collection.
        </p>
        </div>

        <div className="form-container">
          <input
            type="text"
            value={ingredientInput}
            onChange={handleInputChange}
            placeholder="Enter an ingredient"
          />
          {ingredientSuggestions.length > 0 && (
            <ul className="ingredient-suggestions">
              {ingredientSuggestions.map((ingredient, index) => (
                <li
                  key={index}
                  onClick={() => handleIngredientSelect(ingredient.name)}
                  className={ingredients.includes(ingredient.name) ? 'selected' : ''}
                >
                  {ingredients.includes(ingredient.name) ? '✔️' : ''} {ingredient.name}
                </li>
              ))}
            </ul>
          )}
          <button onClick={handleSubmit} disabled={ingredients.length < 3 || loading}>
            {loading ? 'Generating Recipes...' : 'Generate Recipes'}
          </button>
        </div>
      </div>

      <div className="divider"></div>

      <div className="selected-ingredients-container">
        {ingredients.length > 0 && (
          <div>
            <h3>Selected Ingredients</h3>
            <ul>
              {ingredients.map((ingredient, index) => (
                <li key={index}>
                  {ingredient}
                  <button onClick={() => handleIngredientRemove(ingredient)} className="remove-btn">
                    ×
                  </button>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>

      <div className="recipes-container">
        {recipes.length > 0 ? (
          <div className="recipes-grid">
            {recipes.map((recipe, index) => (
              <div key={index} className="recipe-card">
                <div className="image-container">
                  <img
                    src={recipe.image || "https://via.placeholder.com/150"}
                    alt={recipe.title}
                    className="recipe-image"
                  />
                </div>
                <div className="recipe-rating">
                  {renderStars(recipe.rating)}
                </div>

                <h3>{recipe.title}</h3>

                <div className="recipe-categories">
                  {recipe.categories.slice(0, 3).map((category, idx) => (
                    <span key={idx} className="category">
                      <button className="cta">{category}</button>
                      {idx < 2 && <span className="separator"> • </span>}
                    </span>
                  ))}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p>No recipes available. Please ensure you have selected enough ingredients.</p>
        )}
      </div>

      <div className="footer">
        <p>© 2024 <a href="https://catesilva.com">SmartBite</a>. All rights reserved</p>
      </div>
    </div>
  );
}

export default App;
